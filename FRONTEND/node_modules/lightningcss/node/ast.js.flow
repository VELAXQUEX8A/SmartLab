// @flow

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
export type String = string;
/**
 * A CSS rule.
 */
export type Rule<D = Declaration, M = MediaQuery> =
  | {|
      type: "media",
      value: MediaRule<D, M>,
    |}
  | {|
      type: "import",
      value: ImportRule<M>,
    |}
  | {|
      type: "style",
      value: StyleRule<D, M>,
    |}
  | {|
      type: "keyframes",
      value: KeyframesRule<D>,
    |}
  | {|
      type: "font-face",
      value: FontFaceRule,
    |}
  | {|
      type: "font-palette-values",
      value: FontPaletteValuesRule,
    |}
  | {|
      type: "font-feature-values",
      value: FontFeatureValuesRule,
    |}
  | {|
      type: "page",
      value: PageRule<D>,
    |}
  | {|
      type: "supports",
      value: SupportsRule<D, M>,
    |}
  | {|
      type: "counter-style",
      value: CounterStyleRule<D>,
    |}
  | {|
      type: "namespace",
      value: NamespaceRule,
    |}
  | {|
      type: "moz-document",
      value: MozDocumentRule<D, M>,
    |}
  | {|
      type: "nesting",
      value: NestingRule<D, M>,
    |}
  | {|
      type: "viewport",
      value: ViewportRule<D>,
    |}
  | {|
      type: "custom-media",
      value: CustomMediaRule<M>,
    |}
  | {|
      type: "layer-statement",
      value: LayerStatementRule,
    |}
  | {|
      type: "layer-block",
      value: LayerBlockRule<D, M>,
    |}
  | {|
      type: "property",
      value: PropertyRule,
    |}
  | {|
      type: "container",
      value: ContainerRule<D, M>,
    |}
  | {|
      type: "scope",
      value: ScopeRule<D, M>,
    |}
  | {|
      type: "starting-style",
      value: StartingStyleRule<D, M>,
    |}
  | {|
      type: "view-transition",
      value: ViewTransitionRule,
    |}
  | {|
      type: "ignored",
    |}
  | {|
      type: "unknown",
      value: UnknownAtRule,
    |}
  | {|
      type: "custom",
      value: DefaultAtRule,
    |};
/**
 * Represents a media condition.
 */
export type MediaCondition =
  | {|
      type: "feature",
      value: QueryFeatureFor_MediaFeatureId,
    |}
  | {|
      type: "not",
      value: MediaCondition,
    |}
  | {|
      /**
       * The conditions for the operator.
       */
      conditions: MediaCondition[],

      /**
       * The operator for the conditions.
       */
      operator: Operator,
      type: "operation",
    |};
/**
 * A generic media feature or container feature.
 */
export type QueryFeatureFor_MediaFeatureId =
  | {|
      /**
       * The name of the feature.
       */
      name: MediaFeatureNameFor_MediaFeatureId,
      type: "plain",

      /**
       * The feature value.
       */
      value: MediaFeatureValue,
    |}
  | {|
      /**
       * The name of the feature.
       */
      name: MediaFeatureNameFor_MediaFeatureId,
      type: "boolean",
    |}
  | {|
      /**
       * The name of the feature.
       */
      name: MediaFeatureNameFor_MediaFeatureId,

      /**
       * A comparator.
       */
      operator: MediaFeatureComparison,
      type: "range",

      /**
       * The feature value.
       */
      value: MediaFeatureValue,
    |}
  | {|
      /**
       * The end value.
       */
      e